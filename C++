#include <iostream>
#include <sqlite3.h>
#include <string>

using namespace std;

// Function for executing SELECT queries
int execute_sql(sqlite3* db, const char* sql) {
    char* errMsg = 0;
    int rc = sqlite3_exec(db, sql, 0, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cout << "SQL error: " << errMsg << endl;
        sqlite3_free(errMsg);
    }
    return rc;
}

// Function for displaying query results
int display_callback(void* data, int argc, char** argv, char** colNames) {
    for (int i = 0; i < argc; i++) {
        cout << colNames[i] << ": " << argv[i] << " | ";
    }
    cout << endl;
    return 0;
}

// Main menu function
int mainMenu(sqlite3* db) {
    int choice;
    while (true) {
        cout << "\nMain Menu\n";
        cout << "1. Product Management\n";
        cout << "2. Customer Management\n";
        cout << "3. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore();

        if (choice == 1) {
            productMenu(db);
        }
        else if (choice == 2) {
            customerMenu(db);
        }
        else if (choice == 3) {
            break;
        }
    }
    return 0;
}

// Product menu function
int productMenu(sqlite3* db) {
    int choice;
    while (true) {
        cout << "\nProduct Management Menu\n";
        cout << "1. Display Products\n";
        cout << "2. Add Product\n";
        cout << "3. Update Product\n";
        cout << "4. Delete Product\n";
        cout << "5. Return to Main Menu\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore();

        if (choice == 1) {
            execute_sql(db, "SELECT * FROM Product;");
        }
        else if (choice == 2) {
            string name;
            double price;
            int stock;
            cout << "Enter product name: ";
            getline(cin, name);
            cout << "Enter price: ";
            cin >> price;
            cout << "Enter stock: ";
            cin >> stock;
            cin.ignore();
            string sql = "INSERT INTO Product (name, price, stock) VALUES ('" + name + "', " + to_string(price) + ", " + to_string(stock) + ");";
            execute_sql(db, sql.c_str());
        }
        else if (choice == 3) {
            int id;
            string name;
            double price;
            int stock;
            cout << "Enter product ID to update: ";
            cin >> id;
            cin.ignore();
            cout << "Enter new name: ";
            getline(cin, name);
            cout << "Enter new price: ";
            cin >> price;
            cout << "Enter new stock: ";
            cin >> stock;
            cin.ignore();
            string sql = "UPDATE Product SET name = '" + name + "', price = " + to_string(price) + ", stock = " + to_string(stock) + " WHERE id = " + to_string(id) + ";";
            execute_sql(db, sql.c_str());
        }
        else if (choice == 4) {
            int id;
            cout << "Enter product ID to delete: ";
            cin >> id;
            cin.ignore();
            string sql = "DELETE FROM Product WHERE id = " + to_string(id) + ";";
            execute_sql(db, sql.c_str());
        }
        else if (choice == 5) {
            break;
        }
    }
    return 0;
}

// Customer menu function
int customerMenu(sqlite3* db) {
    int choice;
    while (true) {
        cout << "\nCustomer Management Menu\n";
        cout << "1. Display Customers\n";
        cout << "2. Add Customer\n";
        cout << "3. Update Customer\n";
        cout << "4. Delete Customer\n";
        cout << "5. Return to Main Menu\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore();

        if (choice == 1) {
            execute_sql(db, "SELECT * FROM Customer;");
        }
        else if (choice == 2) {
            string name, email, phone;
            cout << "Enter customer name: ";
            getline(cin, name);
            cout << "Enter customer email: ";
            getline(cin, email);
            cout << "Enter customer phone: ";
            getline(cin, phone);
            string sql = "INSERT INTO Customer (name, email, phone) VALUES ('" + name + "', '" + email + "', '" + phone + "');";
            execute_sql(db, sql.c_str());
        }
        else if (choice == 3) {
            int id;
            string name, email, phone;
            cout << "Enter customer ID to update: ";
            cin >> id;
            cin.ignore();
            cout << "Enter new name: ";
            getline(cin, name);
            cout << "Enter new email: ";
            getline(cin, email);
            cout << "Enter new phone: ";
            getline(cin, phone);
            string sql = "UPDATE Customer SET name = '" + name + "', email = '" + email + "', phone = '" + phone + "' WHERE id = " + to_string(id) + ";";
            execute_sql(db, sql.c_str());
        }
        else if (choice == 4) {
            int id;
            cout << "Enter customer ID to delete: ";
            cin >> id;
            cin.ignore();
            string sql = "DELETE FROM Customer WHERE id = " + to_string(id) + ";";
            execute_sql(db, sql.c_str());
        }
        else if (choice == 5) {
            break;
        }
    }
    return 0;
}

int main()
{
    int choice;

    sqlite3 *mydb;

    int rc;

    // Open the database
    rc = sqlite3_open("sweetTreats.db", &mydb);
    if (rc)
    {
        cerr << "Can't open database: " << sqlite3_errmsg(mydb) << endl;
        return 1;
    }

    cout << "Welcome to SweetTreats" << endl;
    choice = mainMenu(mydb);
    while (true)
    {
        switch (choice)
        {
            case 1: productMenu(mydb); break;
            case 2: customerMenu(mydb); break;
            case 3: return 0;
            default: cout << "That is not a valid choice." << endl;
        }
        cout << "\n\n";
        choice = mainMenu(mydb);
    }

    sqlite3_close(mydb);
    return 0;
}

